name: Test Suite

on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3
          
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          
      - name: Code quality checks
        run: |
          echo "Running import sorting check first..."
          python3 -m isort --check-only --diff app/ || (echo "Import sorting check failed. Run 'isort app/' to fix." && exit 1)
          
          echo "Running code formatting check..."
          python3 -m black --check --diff app/ || (echo "Code formatting check failed. Run 'black app/' to fix." && exit 1)
          
          echo "Running linting check..."
          python3 -m flake8 app/ --max-line-length=120 --extend-ignore=E203,W503,E501,E722 || (echo "Linting check failed. Fix the issues above." && exit 1)
          
      - name: Security scanning
        run: |
          echo "Running security scan with bandit..."
          python3 -m pip install bandit safety
          python3 -m bandit -r app/ -f json -o bandit-report.json || true
          
          echo "Running dependency vulnerability scan..."
          python3 -m safety check --json --output safety-report.json || true
          
      - name: Run unit tests
        run: |
          echo "Running unit tests with pytest..."
          python3 -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          python3 -m pytest tests/integration/ -v --cov=app --cov-append
          
      - name: Flask app startup test
        run: |
          echo "Testing Flask app startup..."
          python3 -c "
          from app import create_app
          app = create_app('testing')
          print('‚úì Flask app created successfully')
          print(f'‚úì App name: {app.name}')
          print(f'‚úì Debug mode: {app.debug}')
          "
          
      - name: Database migration test
        run: |
          echo "Testing database migrations..."
          python3 -c "
          from app import create_app, db
          app = create_app('testing')
          with app.app_context():
              db.create_all()
              print('‚úì Database tables created successfully')
              db.drop_all()
              print('‚úì Database tables dropped successfully')
          "
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            bandit-report.json
            safety-report.json
            .pytest_cache/
            
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let coverage = 'N/A';
            let testResults = 'N/A';
            
            try {
              if (fs.existsSync('coverage.xml')) {
                const coverageData = fs.readFileSync('coverage.xml', 'utf8');
                const match = coverageData.match(/line-rate="([^"]+)"/);
                if (match) {
                  coverage = `${(parseFloat(match[1]) * 100).toFixed(1)}%`;
                }
              }
            } catch (e) {
              console.log('Could not read coverage data');
            }
            
            const comment = `## üß™ Test Results for Python ${{ matrix.python-version }}
            
            **Status**: ‚úÖ All checks passed
            
            **Coverage**: ${coverage}
            **Python Version**: ${{ matrix.python-version }}
            
            ### Code Quality
            - ‚úÖ Black formatting check
            - ‚úÖ isort import sorting
            - ‚úÖ flake8 linting
            
            ### Security
            - ‚úÖ Bandit security scan
            - ‚úÖ Safety dependency check
            
            ### Testing
            - ‚úÖ Unit tests
            - ‚úÖ Integration tests
            - ‚úÖ Flask app startup
            - ‚úÖ Database migrations
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('‚úÖ Test results comment posted successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è  Could not post test results comment:', error.message);
              console.log('This is usually due to insufficient permissions or the PR being closed');
            }
