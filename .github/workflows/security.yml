name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
          
      - name: Run Safety check
        run: |
          echo "Running Safety vulnerability scan..."
          safety check --json --output safety-report.json || true
          
      - name: Run Bandit security scan
        run: |
          echo "Running Bandit security scan..."
          bandit -r app/ -f json -o bandit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            
      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let safetyIssues = 0;
            let banditIssues = 0;
            
            try {
              if (fs.existsSync('safety-report.json')) {
                const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
                safetyIssues = safetyData.length || 0;
              }
            } catch (e) {
              console.log('Could not read safety report');
            }
            
            try {
              if (fs.existsSync('bandit-report.json')) {
                const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
                banditIssues = banditData.results ? banditData.results.length : 0;
              }
            } catch (e) {
              console.log('Could not read bandit report');
            }
            
            const comment = `## 🔒 Security Scan Results
            
            **Safety Check**: ${safetyIssues === 0 ? '✅ No vulnerabilities found' : `⚠️ ${safetyIssues} vulnerabilities found`}
            **Bandit Scan**: ${banditIssues === 0 ? '✅ No security issues found' : `⚠️ ${banditIssues} security issues found`}
            
            ${safetyIssues > 0 ? '**⚠️ Please review Safety report for dependency vulnerabilities**' : ''}
            ${banditIssues > 0 ? '**⚠️ Please review Bandit report for code security issues**' : ''}
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          
      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          
      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          pip list --outdated --format=freeze > outdated.txt || true
          
          if [ -s outdated.txt ]; then
            echo "Found outdated dependencies:"
            cat outdated.txt
            echo "::warning ::Outdated dependencies found. Consider updating requirements.txt"
          else
            echo "All dependencies are up to date!"
          fi
          
      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-report
          path: outdated.txt
          
      - name: Create issue for outdated dependencies
        if: hashFiles('outdated.txt') != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let outdatedDeps = '';
            
            try {
              if (fs.existsSync('outdated.txt')) {
                outdatedDeps = fs.readFileSync('outdated.txt', 'utf8');
              }
            } catch (e) {
              console.log('Could not read outdated dependencies file');
            }
            
            if (outdatedDeps) {
              const title = '🔒 Security: Outdated Dependencies Detected';
              const body = `## Outdated Dependencies Detected
              
              The following dependencies have newer versions available:
              
              \`\`\`
              ${outdatedDeps}
              \`\`\`
              
              ### Recommended Actions:
              1. Review the outdated dependencies
              2. Test compatibility with newer versions
              3. Update requirements.txt if safe
              4. Run full test suite after updates
              
              ---
              *This issue was automatically created by GitHub Actions security scan*`;
              
              // Check if issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['security', 'dependencies']
              });
              
              const hasExistingIssue = existingIssues.data.some(issue => 
                issue.title === title
              );
              
              if (!hasExistingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'dependencies', 'automated']
                });
              }
            }
